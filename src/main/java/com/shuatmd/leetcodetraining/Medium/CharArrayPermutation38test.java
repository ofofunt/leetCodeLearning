package com.shuatmd.leetcodetraining.Medium;

import com.shuatmd.leetcodetraining.DTO.ListNode;
import com.shuatmd.leetcodetraining.DTO.TreeNode;
import com.shuatmd.leetcodetraining.Easy.*;
import com.shuatmd.leetcodetraining.Hard.CodeAndDecodeBinaryTree048;
import com.shuatmd.leetcodetraining.Hard.MaxIntInSlidingWindow59;
import com.shuatmd.leetcodetraining.Hard.MinWindowContainTargetString017;
import com.shuatmd.leetcodetraining.Hard.ReversePairsInArray51;

public class CharArrayPermutation38test {
    public static void main(String[] args) {
        TreeNode tree = new TreeNode(1);
        tree.left = new TreeNode(2);
        tree.right = new TreeNode(3);
        tree.left.left = null;
        tree.left.right = null;
        tree.right.left = new TreeNode(4);
        tree.right.right = new TreeNode(5);
        SumOfBinaryTree054 bigTree054 = new SumOfBinaryTree054();
        bigTree054.convertBST(tree);
        InorderSuccessor053 inOrderSuccessor053 = new InorderSuccessor053();
        inOrderSuccessor053.inorderSuccessorAdvanced(tree, new TreeNode(2));
        SumNumbersBinaryTree049 sum = new SumNumbersBinaryTree049();
        sum.sumNumbers(tree);
        CodeAndDecodeBinaryTree048 coder = new CodeAndDecodeBinaryTree048();
        coder.deserialize(coder.serialize(tree));
        DailyTemperature038 daily = new DailyTemperature038();
        daily.dailyTemperaturesBrute(new int[]{73,74,75,71,69,72,76,73});
        AsteroidCollision037 asteroidCollision = new AsteroidCollision037();
        asteroidCollision.asteroidCollision(new int[]{5,10,-5, -99});
        AlienDictionarySorted alien = new AlienDictionarySorted();
        alien.isAlienSortedOfficial(new String[]{"apple","app"}, "hlabcdefgijkmnopqrstuvwxyz");
        GroupAnagramsCheck033 groupsCheck034 = new GroupAnagramsCheck033();
        groupsCheck034.groupAnagrams(new String[]{"eat","tea","tan","ate","nat","bat"});
        ListNode exampleNode = new ListNode();
        exampleNode.val = 1;
        exampleNode.next = new ListNode();
        exampleNode.next.next = new ListNode();
        exampleNode.next.next.next = new ListNode();
        exampleNode.next.next.next.next = new ListNode();
        exampleNode.next.val = 2;
        exampleNode.next.next.val = 3;
        exampleNode.next.next.next.val = 4;
        exampleNode.next.next.next.next.val = 5;
        ListNode exampleNode2 = new ListNode();
        exampleNode2.val = 1;
        exampleNode2.next = new ListNode();
        exampleNode2.next.next = new ListNode();
        exampleNode2.next.next.next = new ListNode();
        exampleNode2.next.val = 2;
        exampleNode2.next.next.val = 3;
        exampleNode2.next.next.next.val = 4;
        IsPalindromeList027 islands = new IsPalindromeList027();
        islands.isPalindrome(exampleNode);
        ListAdd025 listAdd = new ListAdd025();
        ReorderList026 reorderList026 = new ReorderList026();
        reorderList026.reorderListOfficial(exampleNode2);
        listAdd.addTwoNumbers(new ListNode(1),new ListNode(9, new ListNode(9)));
        ReverseListNode024 reverListNode = new ReverseListNode024();
        reverListNode.reverseList(exampleNode);
        RemoveNthListFromEnd021 remove = new RemoveNthListFromEnd021();
        remove.removeNthFromEnd(exampleNode, 2);
        CountPalindromeSubstring020 countPalindromeSubstring020 = new CountPalindromeSubstring020();
        countPalindromeSubstring020.countSubstringsCenter("fdsklf");
        ValidPlaindromeDeleteOneChar019 validate = new ValidPlaindromeDeleteOneChar019();
        validate.validPalindrome("abc");
        MinWindowContainTargetString017 min = new MinWindowContainTargetString017();
        min.minWindow("ADOBECODEBANC", "ABC");
        LongestSubstringWIthoutDuplication016 lengths = new LongestSubstringWIthoutDuplication016();
        lengths.lengthOfLongestSubstring2("pwwkew");
        InclusionSubstring014 inclusionSubstring014 = new InclusionSubstring014();
        inclusionSubstring014.checkInclusion("adc", "dcda");
        FindMaxLengthSubArrayBalanced011 findMaxLengthSubArray = new FindMaxLengthSubArrayBalanced011();
        findMaxLengthSubArray.findMaxLength(new int[]{0, 1, 0, 1});
        SubArrayProductLessThan009 subArrayProductLessThan009 = new SubArrayProductLessThan009();
        subArrayProductLessThan009.numSubarrayProductLessThanK(new int[]{1, 2, 3}, 0);
        MinSubArrayLen008 minSubArrayLen008 = new MinSubArrayLen008();
        minSubArrayLen008.minSubArrayLen(213, new int[]{12, 28, 83, 4, 25, 26, 25, 2, 25, 25, 25, 12});
        MaxProductForWords005 maxProductForWords005 = new MaxProductForWords005();
        maxProductForWords005.maxProduct(new String[]{"abcw", "baz", "foo", "bar", "xtfn", "abcdef"});
        CountBits003 c = new CountBits003();
        c.countBits(9);
        BinaryAdd002 b = new BinaryAdd002();
        b.addBinaryMock("10", "11");
        PokerStraight61 pokerStraight61 = new PokerStraight61();
        pokerStraight61.isStraight(new int[]{0, 0, 0, 1, 2, 5});
        MultiplierMatrix66 matrix = new MultiplierMatrix66();
        matrix.constructArr(new int[]{1, 2, 3, 4, 5});
        ImplementAdd65 add = new ImplementAdd65();
        add.add(3, 6);
        SumNumbers64 sums = new SumNumbers64();
        sums.sumNumsException(10);
        MaxProfitStock63 max = new MaxProfitStock63();
        max.maxProfit(new int[]{7, 1, 5, 3, 6, 4});
        DicesSumProbability60 dictionarySumProbability60 = new DicesSumProbability60();
        dictionarySumProbability60.dicesProbabilityDp(3);
        MaxIntInSlidingWindow59 maxIntInSlidingWindow59 = new MaxIntInSlidingWindow59();
        maxIntInSlidingWindow59.maxSlidingWindowOfficial(new int[]{7, 2, 4}, 2);
        ReverseWordsLeftwards58 reverseWordsLeftwards58 = new ReverseWordsLeftwards58();
        reverseWordsLeftwards58.reverseLeftWords("abcdefg", 2);
        ReverseWrods58 reverseWrods58 = new ReverseWrods58();
        reverseWrods58.reverseWordsOfficial("the sky is blue");
        FindContinuousSequenceWithSumTarget57 findContinuousSequenceWithSumTarget57 = new FindContinuousSequenceWithSumTarget57();
        findContinuousSequenceWithSumTarget57.findContinuousSequenceScrollWindow(9);
        MissingNumberInConsecutiveArray53 missingNumberInConsecutiveArray = new MissingNumberInConsecutiveArray53();
        System.out.println(missingNumberInConsecutiveArray.missingNumber(new int[]{0, 1, 2, 3, 4, 6}));
        CharArrayPermutation38 charArrayPermutation = new CharArrayPermutation38();
        ReversePairsInArray51 reversePairsInArray = new ReversePairsInArray51();
        reversePairsInArray.reversePairs(new int[]{7, 3, 2, 6, 0, 1, 5, 4});
        String[] abcds = charArrayPermutation.permutation("abc");
        for (String abcd : abcds) {
            System.out.println(abcd);
        }
        FirstUniqChar50 firstUniqChar = new FirstUniqChar50();
        firstUniqChar.firstUniqChar("loveleetcode");
        NthUglyNumber49 nthUglyNumber = new NthUglyNumber49();
        System.out.println(nthUglyNumber.nthUglyNumber(10));
        LengthOfLongestSubstring48 length = new LengthOfLongestSubstring48();
        length.lengthOfLongestSubstring("abcabcbb");
        TranslateNumIntoChar46 translateNumIntoChar = new TranslateNumIntoChar46();
        translateNumIntoChar.translateNum(25);
    }
}
