package com.shuatmd.leetcodetraining.Easy;
//剑指 Offer 62. 圆圈中最后剩下的数字
//0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。
//
//例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。
public class LastRemainingIntInCircle62 {
    //dp解法:
    //dp[i] = (dp[i - 1] + m) % i
    public int lastRemainingDp(int n, int m) {
        int res = 0;
        for (int i = 2; i < n; i++) {
            res = (m + res) % n;
        }
        return res;
    }
    //数学解法：逆向递推
    //f(n,m)表示在长度为n的序列中,循环删除第m个数字最后剩下来的数字的index 设f(n,m) = x
    //f(n -1, m)为上一次删除的结果 因为最后剩余的一个数每次循环都不会被删除 所以可以逆向推到他的顺序
    //f(n, m)时 删除的是m%n - 1位元素,新的计数index为m%n
    //f(n, m) = (m % n + f(n - 1 , m)) %n = (f(n - 1, m) + m) % n
    //且我们知道f(1 , m) 一定等于0 可以开始逆推
    public int lastRemainingMath(int n, int m) {
        //递归做法
        return recur(n, m);
    }

    //递归倒序查找
     /*
    思路：使用数学方法(先举例)
            你要知道最后的结果是3，带着结果去看问题

        第一次，【0, 1, 2, 3, 4】，本轮要踢出2                                  看3
        (下一轮开始从3计数，为了方便读者看出规律，将开始计数的那一位移到开头)
        第二次，【3, 4, 0, 1】，本轮要踢出0                                     看1
        第三次，【1, 3, 4】，本轮要踢出4                                        看1
        第四次，【1, 3】 本轮要踢出1                                            看3
        第五次，【3】
        最后返回3
        我们要使用的数学方法，就是从结果0号位置，反推最开始在哪
        你从第二次，向上看第一次
        你会发现，原来3在0的位置
                现在，3在(0 + 3) % 5
                        => +3 回到上次的位置
                        => %5 防止数组溢出，并且数组本来就是循环数组

        f(n) = ( f(n - 1) + m ) % n
        解释意思：
            f(n) 表示上一次
            f(n - 1) 表示这次，因为我们要从这次回推上一次
            m 表示隔几个
            n表示上一次的数组长度

     */
    private int recur(int n, int m) {
        if(n == 1){
            return 0;
        }
        int resIndex = recur(n - 1, m);
        return (m + resIndex)%n;
    }
}
